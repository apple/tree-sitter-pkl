===
errors/listingTypeCheckError9.pkl
===

local a = new Listing { new Foo {} }
local b = (a) { new Bar {} }
local c = b as Listing<Bar>
local d = (c) { new Foo {} }
local e = d as Listing<Foo>

result = e

open class Foo
class Bar extends Foo

---

(module
  (classProperty
    (modifier)
    (identifier)
    (newExpr
      (declaredType
        (qualifiedIdentifier
          (identifier)))
      (objectBody
        (objectElement
          (newExpr
            (declaredType
              (qualifiedIdentifier
                (identifier)))
            (objectBody))))))
  (classProperty
    (modifier)
    (identifier)
    (amendExpr
      (parenthesizedExpr
        (unqualifiedAccessExpr
          (identifier)))
      (objectBody
        (objectElement
          (newExpr
            (declaredType
              (qualifiedIdentifier
                (identifier)))
            (objectBody))))))
  (classProperty
    (modifier)
    (identifier)
    (typeTestExpr
      (unqualifiedAccessExpr
        (identifier))
      (declaredType
        (qualifiedIdentifier
          (identifier))
        (typeArgumentList
          (declaredType
            (qualifiedIdentifier
              (identifier)))))))
  (classProperty
    (modifier)
    (identifier)
    (amendExpr
      (parenthesizedExpr
        (unqualifiedAccessExpr
          (identifier)))
      (objectBody
        (objectElement
          (newExpr
            (declaredType
              (qualifiedIdentifier
                (identifier)))
            (objectBody))))))
  (classProperty
    (modifier)
    (identifier)
    (typeTestExpr
      (unqualifiedAccessExpr
        (identifier))
      (declaredType
        (qualifiedIdentifier
          (identifier))
        (typeArgumentList
          (declaredType
            (qualifiedIdentifier
              (identifier)))))))
  (classProperty
    (identifier)
    (unqualifiedAccessExpr
      (identifier)))
  (clazz
    (modifier)
    (identifier))
  (clazz
    (identifier)      (classExtendsClause
      (qualifiedIdentifier
        (identifier)))))