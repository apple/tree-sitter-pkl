===
objects/closure.pkl
===

function closeOverFunctionArg(x) = new Dynamic { value = x }

res1 = closeOverFunctionArg(4).value

hidden closeOverLambdaArg = (x) -> new Dynamic { value = x }

res2 = closeOverLambdaArg.apply(4).value

function closeOverFunctionAndLambdaArg(x) = (y) -> new Dynamic { value = y + x }

res3 = closeOverFunctionAndLambdaArg(4).apply(5).value

hidden closeOverTwoLambdaArgs = (x) -> (y) -> new Dynamic { value = y + x }

res4 = closeOverTwoLambdaArgs.apply(4).apply(5).value

---

(module
  (classMethod
    (methodHeader
      (identifier)
      (parameterList
        (typedIdentifier
          (identifier))))
    (newExpr
      (declaredType
        (qualifiedIdentifier
          (identifier)))
      (objectBody
        (objectProperty
          (identifier)
          (unqualifiedAccessExpr
            (identifier))))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier)
        (argumentList
          (intLiteralExpr)))
      (identifier)))
  (classProperty
    (modifier)
    (identifier)
    (functionLiteralExpr
      (parameterList
        (typedIdentifier
          (identifier)))
      (newExpr
        (declaredType
          (qualifiedIdentifier
            (identifier)))
        (objectBody
          (objectProperty
            (identifier)
            (unqualifiedAccessExpr
              (identifier)))))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (qualifiedAccessExpr
        (unqualifiedAccessExpr
          (identifier))
        (identifier)
        (argumentList
          (intLiteralExpr)))
      (identifier)))
  (classMethod
    (methodHeader
      (identifier)
      (parameterList
        (typedIdentifier
          (identifier))))
    (functionLiteralExpr
      (parameterList
        (typedIdentifier
          (identifier)))
      (newExpr
        (declaredType
          (qualifiedIdentifier
            (identifier)))
        (objectBody
          (objectProperty
            (identifier)
            (additiveExpr
              (unqualifiedAccessExpr
                (identifier))
              (unqualifiedAccessExpr
                (identifier))))))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (qualifiedAccessExpr
        (unqualifiedAccessExpr
          (identifier)
          (argumentList
            (intLiteralExpr)))
        (identifier)
        (argumentList
          (intLiteralExpr)))
      (identifier)))
  (classProperty
    (modifier)
    (identifier)
    (functionLiteralExpr
      (parameterList
        (typedIdentifier
          (identifier)))
      (functionLiteralExpr
        (parameterList
          (typedIdentifier
            (identifier)))
        (newExpr
          (declaredType
            (qualifiedIdentifier
              (identifier)))
          (objectBody
            (objectProperty
              (identifier)
              (additiveExpr
                (unqualifiedAccessExpr
                  (identifier))
                (unqualifiedAccessExpr
                  (identifier)))))))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (qualifiedAccessExpr
        (qualifiedAccessExpr
          (unqualifiedAccessExpr
            (identifier))
          (identifier)
          (argumentList
            (intLiteralExpr)))
        (identifier)
        (argumentList
          (intLiteralExpr)))
      (identifier))))