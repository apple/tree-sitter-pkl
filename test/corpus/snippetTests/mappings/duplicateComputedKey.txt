================================================================================
mappings/duplicateComputedKey
================================================================================

import "pkl:test"

res1 = test.catch(() -> new Mapping {
  ["barn owl"] = 1
  ["pigeon"] = 2
  ["bar" + "n owl"] = 3
})

res2 = test.catch(() -> new Mapping {
  ["ba" + "rn owl"] = 1
  ["pigeon"] = 2
  ["barn " + "owl"] = 3
})

--------------------------------------------------------------------------------

(module
  (importClause
    (stringConstant
      (stringFragment)))
  (classProperty
    (identifier)
    (methodCallExpr
      (variableExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteral
          (parameterList)
          (newExpr
            (type
              (qualifiedIdentifier
                (identifier)))
            (objectBody
              (objectEntry
                (slStringLiteral
                  (stringFragment))
                (intLiteral))
              (objectEntry
                (slStringLiteral
                  (stringFragment))
                (intLiteral))
              (objectEntry
                (binaryExpr
                  (slStringLiteral
                    (stringFragment))
                  (slStringLiteral
                    (stringFragment)))
                (intLiteral))))))))
  (classProperty
    (identifier)
    (methodCallExpr
      (variableExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteral
          (parameterList)
          (newExpr
            (type
              (qualifiedIdentifier
                (identifier)))
            (objectBody
              (objectEntry
                (binaryExpr
                  (slStringLiteral
                    (stringFragment))
                  (slStringLiteral
                    (stringFragment)))
                (intLiteral))
              (objectEntry
                (slStringLiteral
                  (stringFragment))
                (intLiteral))
              (objectEntry
                (binaryExpr
                  (slStringLiteral
                    (stringFragment))
                  (slStringLiteral
                    (stringFragment)))
                (intLiteral)))))))))
