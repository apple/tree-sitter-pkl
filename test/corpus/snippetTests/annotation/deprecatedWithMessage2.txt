===
annotation/deprecatedWithMessage2.pkl
===

module deprecatedWithMessage2

extends "deprecatedWithMessage1.pkl"

@Deprecated { message = "avoid using f1" }
function f1(n) = -1 * (n * 1000 + 1)

res1 = f1(800)
res1b = List(22, 23, 24).map((n) -> f1(n))

res2 = f2(900)
res2b = List(25, 26, 27).map((n) -> f2(n))

---

(module
  (moduleHeader
    (moduleClause

      (qualifiedIdentifier
        (identifier)))
      (extendsOrAmendsClause
      (stringConstant
        (slStringLiteralPart))))
  (classMethod
    (annotation
      (qualifiedIdentifier
        (identifier))
      (objectBody
        (objectProperty
          (identifier)
          (slStringLiteralExpr
            (slStringLiteralPart)))))
    (methodHeader
      (identifier)
      (parameterList
        (typedIdentifier
          (identifier))))
    (multiplicativeExpr
      (unaryMinusExpr
        (intLiteralExpr))
      (parenthesizedExpr
        (additiveExpr
          (multiplicativeExpr
            (unqualifiedAccessExpr
              (identifier))
            (intLiteralExpr))
          (intLiteralExpr)))))
  (classProperty
    (identifier)
    (unqualifiedAccessExpr
      (identifier)
      (argumentList
        (intLiteralExpr))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier)
        (argumentList
          (intLiteralExpr)
          (intLiteralExpr)
          (intLiteralExpr)))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList
            (typedIdentifier
              (identifier)))
          (unqualifiedAccessExpr
            (identifier)
            (argumentList
              (unqualifiedAccessExpr
                (identifier))))))))
  (classProperty
    (identifier)
    (unqualifiedAccessExpr
      (identifier)
      (argumentList
        (intLiteralExpr))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier)
        (argumentList
          (intLiteralExpr)
          (intLiteralExpr)
          (intLiteralExpr)))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList
            (typedIdentifier
              (identifier)))
          (unqualifiedAccessExpr
            (identifier)
            (argumentList
              (unqualifiedAccessExpr
                (identifier)))))))))