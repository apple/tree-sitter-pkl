===
classes/constraints3.pkl
===

import "pkl:test"

class Person {
  address: Address(street.endsWith("St."))
}

class Address {
  street: String
}

res1 = new Person {
  address {
    street = "Hampton St."
  }
}

res2 = test.catch(() ->
  new Person {
    address {
      street = "Garlic Blvd."
    }
  }.address
)

---

(module
  (importClause
    (stringConstant
      (slStringLiteralPart)))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (typeAnnotation
          (constrainedType
            (declaredType
              (qualifiedIdentifier
                (identifier)))
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)
              (argumentList
                (slStringLiteralExpr
                  (slStringLiteralPart)))))))))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (typeAnnotation
          (declaredType
            (qualifiedIdentifier
              (identifier)))))))
  (classProperty
    (identifier)
    (newExpr
      (declaredType
        (qualifiedIdentifier
          (identifier)))
      (objectBody
        (objectProperty
          (identifier)
          (objectBody
            (objectProperty
              (identifier)
              (slStringLiteralExpr
                (slStringLiteralPart))))))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList)
          (qualifiedAccessExpr
            (newExpr
              (declaredType
                (qualifiedIdentifier
                  (identifier)))
              (objectBody
                (objectProperty
                  (identifier)
                  (objectBody
                    (objectProperty
                      (identifier)
                      (slStringLiteralExpr
                        (slStringLiteralPart)))))))
            (identifier)))))))