===
mappings2/duplicateComputedKey.pkl
===

import "pkl:test"

res1 = test.catch(() -> new Mapping {
  when (false) { [0] = 0 }
  ["barn owl"] = 1
  ["pigeon"] = 2
  ["barn " + "owl"] = 3
})

res2 = test.catch(() -> new Mapping {
  when (false) { [0] = 0 }
  ["ba" + "rn owl"] = 1
  ["pigeon"] = 2
  ["barn" + " owl"] = 3
})

---

(module
  (importClause
    (stringConstant
      (slStringLiteralPart)))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList)
          (newExpr
            (declaredType
              (qualifiedIdentifier
                (identifier)))
            (objectBody
              (whenGenerator
                (falseLiteralExpr)
                (objectBody
                  (objectEntry
                    (intLiteralExpr)
                    (intLiteralExpr))))
              (objectEntry
                (slStringLiteralExpr
                  (slStringLiteralPart))
                (intLiteralExpr))
              (objectEntry
                (slStringLiteralExpr
                  (slStringLiteralPart))
                (intLiteralExpr))
              (objectEntry
                (additiveExpr
                  (slStringLiteralExpr
                    (slStringLiteralPart))
                  (slStringLiteralExpr
                    (slStringLiteralPart)))
                (intLiteralExpr))))))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList)
          (newExpr
            (declaredType
              (qualifiedIdentifier
                (identifier)))
            (objectBody
              (whenGenerator
                (falseLiteralExpr)
                (objectBody
                  (objectEntry
                    (intLiteralExpr)
                    (intLiteralExpr))))
              (objectEntry
                (additiveExpr
                  (slStringLiteralExpr
                    (slStringLiteralPart))
                  (slStringLiteralExpr
                    (slStringLiteralPart)))
                (intLiteralExpr))
              (objectEntry
                (slStringLiteralExpr
                  (slStringLiteralPart))
                (intLiteralExpr))
              (objectEntry
                (additiveExpr
                  (slStringLiteralExpr
                    (slStringLiteralPart))
                  (slStringLiteralExpr
                    (slStringLiteralPart)))
                (intLiteralExpr)))))))))