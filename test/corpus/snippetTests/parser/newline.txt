================================================================================
parser/newline
================================================================================

amends "../snippetTest.pkl"

facts {
  ["parsed as two expressions because `String<newline>(foo)` is not a syntactically valid constrained type"] {
    local foo = 42
    new Listing {
      foo is (String) -> String
      (foo) is (String) -> String
    }.length == 2 // used to return 1
  }
}

--------------------------------------------------------------------------------

(module
  (moduleHeader
    (extendsOrAmendsClause
      (stringConstant)))
  (classProperty
    (identifier)
    (objectBody
      (objectEntry
        (slStringLiteral)
        (objectBody
          (objectProperty
            (modifier)
            (identifier)
            (intLiteral))
          (objectElement
            (binaryExpr
              (propertyCallExpr
                (newExpr
                  (type
                    (qualifiedIdentifier
                      (identifier)))
                  (objectBody
                    (objectElement
                      (isExpr
                        (isExpr
                          (variableExpr
                            (identifier))
                          (type
                            (type
                              (qualifiedIdentifier
                                (identifier)))
                            (type
                              (type
                                (qualifiedIdentifier
                                  (identifier)))
                              (variableExpr
                                (identifier)))))
                        (type
                          (type
                            (qualifiedIdentifier
                              (identifier)))
                          (type
                            (qualifiedIdentifier
                              (identifier))))))))
                (identifier))
              (intLiteral)))
          (lineComment))))))
