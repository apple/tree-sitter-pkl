===
api/pair.pkl
===

amends "../snippetTest.pkl"

local pair = Pair("Pigeon", 42)
local pair2 = Pair(new Dynamic { name = "Pigeon" }, List(1, 2, 3))
local pair3 = Pair(null, Pair(Regex("Pigeon"), 42.ms))

examples {
  ["first"] {
    pair.first
    pair2.first
    pair3.first
  }

  ["second"] {
    pair.second
    pair2.second
    pair3.second
  }

  ["key"] {
    pair.key
    pair2.key
    pair3.key
  }

  ["value"] {
    pair.value
    pair2.value
    pair3.value
  }
}

---

(module
  (moduleHeader
      (extendsOrAmendsClause
      (stringConstant
        (slStringLiteralPart))))
  (classProperty
    (modifier)
    (identifier)
    (unqualifiedAccessExpr
      (identifier)
      (argumentList
        (slStringLiteralExpr
          (slStringLiteralPart))
        (intLiteralExpr))))
  (classProperty
    (modifier)
    (identifier)
    (unqualifiedAccessExpr
      (identifier)
      (argumentList
        (newExpr
          (declaredType
            (qualifiedIdentifier
              (identifier)))
          (objectBody
            (objectProperty
              (identifier)
              (slStringLiteralExpr
                (slStringLiteralPart)))))
        (unqualifiedAccessExpr
          (identifier)
          (argumentList
            (intLiteralExpr)
            (intLiteralExpr)
            (intLiteralExpr))))))
  (classProperty
    (modifier)
    (identifier)
    (unqualifiedAccessExpr
      (identifier)
      (argumentList
        (nullLiteralExpr)
        (unqualifiedAccessExpr
          (identifier)
          (argumentList
            (unqualifiedAccessExpr
              (identifier)
              (argumentList
                (slStringLiteralExpr
                  (slStringLiteralPart))))
            (qualifiedAccessExpr
              (intLiteralExpr)
              (identifier)))))))
  (classProperty
    (identifier)
    (objectBody
      (objectEntry
        (slStringLiteralExpr
          (slStringLiteralPart))
        (objectBody
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)))
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)))
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)))))
      (objectEntry
        (slStringLiteralExpr
          (slStringLiteralPart))
        (objectBody
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)))
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)))
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)))))
      (objectEntry
        (slStringLiteralExpr
          (slStringLiteralPart))
        (objectBody
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)))
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)))
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)))))
      (objectEntry
        (slStringLiteralExpr
          (slStringLiteralPart))
        (objectBody
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)))
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)))
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier))))))))