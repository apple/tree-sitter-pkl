===
api/yamlParser5.pkl
===

amends ".../snippetTest.pkl"

import "pkl:yaml"

local parser: yaml.Parser = new {
  maxCollectionAliases = 1
}

examples {
  ["maxCollectionAliases -- happy path"] {
    parser.parse("""
      lol1: &lol1 ["lol"]
      lol2: *lol1
      """
    )
  }
  ["maxCollectionAliases -- failing"] {
    module.catch(() -> parser.parse("""
      lol1: &lol1 ["lol"]
      lol2: *lol1
      lol3: *lol1
      """))
  }
}


---

(module
  (moduleHeader
      (extendsOrAmendsClause
      (stringConstant
        (slStringLiteralPart))))
  (importClause
    (stringConstant
      (slStringLiteralPart)))
  (classProperty
    (modifier)
    (identifier)
    (typeAnnotation
      (declaredType
        (qualifiedIdentifier
          (identifier)
          (identifier))))
    (newExpr
      (objectBody
        (objectProperty
          (identifier)
          (intLiteralExpr)))))
  (classProperty
    (identifier)
    (objectBody
      (objectEntry
        (slStringLiteralExpr
          (slStringLiteralPart))
        (objectBody
          (objectElement
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)
              (argumentList
                (mlStringLiteralExpr
                  (mlStringLiteralPart)))))))
      (objectEntry
        (slStringLiteralExpr
          (slStringLiteralPart))
        (objectBody
          (objectElement
            (qualifiedAccessExpr
              (moduleExpr)
              (identifier)
              (argumentList
                (functionLiteralExpr
                  (parameterList)
                  (qualifiedAccessExpr
                    (unqualifiedAccessExpr
                      (identifier))
                    (identifier)
                    (argumentList
                      (mlStringLiteralExpr
                        (mlStringLiteralPart)))))))))))))