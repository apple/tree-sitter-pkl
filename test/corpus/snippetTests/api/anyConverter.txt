===
api/anyConverter.pkl
===

class User {
  name: String
}

class Dog {
  age: Int
}

class Env {
  type: "test"|"prod"
}

foo = new Listing {
  new User {
    name = "Pigeon"
  }
  new Dog {
    age = 5
  }
  new Env {
    type = "prod"
  }
  "42"
}

output {
  renderer = new PcfRenderer {
    converters {
      [Any] = (o) -> if (o is module) o else "Unconverted class: \(o.getClass())"
      [Dog] = (d) -> "Dog(\(d.age))"
    }
  }
}

---

(module
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (typeAnnotation
          (declaredType
            (qualifiedIdentifier
              (identifier)))))))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (typeAnnotation
          (declaredType
            (qualifiedIdentifier
              (identifier)))))))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (typeAnnotation
          (unionType
            (stringLiteralType
              (stringConstant
                (slStringLiteralPart)))
            (stringLiteralType
              (stringConstant
                (slStringLiteralPart))))))))
  (classProperty
    (identifier)
    (newExpr
      (declaredType
        (qualifiedIdentifier
          (identifier)))
      (objectBody
        (objectElement
          (newExpr
            (declaredType
              (qualifiedIdentifier
                (identifier)))
            (objectBody
              (objectProperty
                (identifier)
                (slStringLiteralExpr
                  (slStringLiteralPart))))))
        (objectElement
          (newExpr
            (declaredType
              (qualifiedIdentifier
                (identifier)))
            (objectBody
              (objectProperty
                (identifier)
                (intLiteralExpr)))))
        (objectElement
          (newExpr
            (declaredType
              (qualifiedIdentifier
                (identifier)))
            (objectBody
              (objectProperty
                (identifier)
                (slStringLiteralExpr
                  (slStringLiteralPart))))))
        (objectElement
          (slStringLiteralExpr
            (slStringLiteralPart))))))
  (classProperty
    (identifier)
    (objectBody
      (objectProperty
        (identifier)
        (newExpr
          (declaredType
            (qualifiedIdentifier
              (identifier)))
          (objectBody
            (objectProperty
              (identifier)
              (objectBody
                (objectEntry
                  (unqualifiedAccessExpr
                    (identifier))
                  (functionLiteralExpr
                    (parameterList
                      (typedIdentifier
                        (identifier)))
                    (ifExpr
                      (typeTestExpr
                        (unqualifiedAccessExpr
                          (identifier))
                        (moduleType))
                      (unqualifiedAccessExpr
                        (identifier))
                      (slStringLiteralExpr
                        (slStringLiteralPart)
                        (stringInterpolation
                          (qualifiedAccessExpr
                            (unqualifiedAccessExpr
                              (identifier))
                            (identifier)
                            (argumentList)))))))
                (objectEntry
                  (unqualifiedAccessExpr
                    (identifier))
                  (functionLiteralExpr
                    (parameterList
                      (typedIdentifier
                        (identifier)))
                    (slStringLiteralExpr
                      (slStringLiteralPart)
                      (stringInterpolation
                        (qualifiedAccessExpr
                          (unqualifiedAccessExpr
                            (identifier))
                          (identifier)))
                      (slStringLiteralPart))))))))))))