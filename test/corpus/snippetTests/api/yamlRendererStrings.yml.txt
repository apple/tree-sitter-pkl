================================================================================
api/yamlRendererStrings.yml
================================================================================

// only newlines
a1 = "\n"
a2 = "\n\n"
a3 = "\n\n\n"

// leading newlines
b1 = "\none"
b2 = "\n\none"
b3 = "\n\n\none"

// intermediate newlines
c1 = "one\ntwo"
c2 = "one\n\ntwo"
c3 = "one\n\n\ntwo"

// trailing newlines
d1 = "one\n"
d2 = "one\n\n"
d3 = "one\n\n\n"

// only spaces
e1 = ""
e2 = " "
e3 = "   "

// leading spaces
f1 = " one"
f2 = "   one"

// trailing spaces
g1 = "one "
g2 = "one   "

// control characters
h1 = "\t"
h2 = "one\ttwo"
h3 = "\r"
h4 = "one\rtwo"
h5 = "\u{7}"
h6 = "one\u{7}two"

// control characters in multiline strings
i1 = "one\ttwo\nthree"
i2 = "one\rtwo\nthree"
i3 = "one\u{7}two\nthree"

// leading spaces in multiline strings
j1 = " one\ntwo"
j2 = "   one\ntwo"
j3 = "one\n   two"

// trailing spaces in multiline strings
k1 = "one\ntwo "
k2 = "one\ntwo   "
k3 = "one   \ntwo"

// only newlines and spaces
l1 = "\n   "
l2 = "   \n"
l3 = "   \n   "
l4 = "\n   \n"

m1 = "foo:"
m2 = "foo::"
m3 = "foo:foo"

n1 {
  a {
    b {
      c = """
          my
        multiline
        string
        """
    }
  }
}

o1 = "%"
o2 = "%hello"
o3 = """
  %
  hello there
  """

p1 = "-"
p2 = "?"
p3 = ":"
p4 = "? apple"
p5 = ": banana"
p6 = "- orange"
p7 = """
  ?
  apple
  """
p8 = """
  :
  banana
  """
p9 = """
  -
  orange
  """
p10 = "?apple"
p11 = ":banana"
p12 = "-orange"

output {
  renderer = new YamlRenderer {}
}

--------------------------------------------------------------------------------

(module
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)
      (escapeSequence)))
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)
      (escapeSequence)))
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)
      (escapeSequence)))
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)
      (escapeSequence)))
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)))
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (lineComment)
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral
      (escapeSequence)
      (escapeSequence)))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (objectBody
      (objectProperty
        (identifier)
        (objectBody
          (objectProperty
            (identifier)
            (objectBody
              (objectProperty
                (identifier)
                (mlStringLiteral))))))))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (mlStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (mlStringLiteral))
  (classProperty
    (identifier)
    (mlStringLiteral))
  (classProperty
    (identifier)
    (mlStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (slStringLiteral))
  (classProperty
    (identifier)
    (objectBody
      (objectProperty
        (identifier)
        (newExpr
          (type
            (qualifiedIdentifier
              (identifier)))
          (objectBody))))))
