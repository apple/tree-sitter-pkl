===
basic/letTyped.pkl
===

import "pkl:test"

res1 =
  let (x: Int = 42)
    x + 1

res2 =
  let (str: String(endsWith("P")) = "Pigeon".reverse())
    str.reverse()

res3 =
  let (x: Duration(unit == "min") = 3.min + 2.min)
    let (y: Float(isPositive) = 1.2 + 1.3)
      x * y

res4 =
  let (xs: List<Null|Boolean|"Pigeon"> = List("Pigeon", true, null))
    xs

res5 = test.catch(() ->
  let (x: String = 42)
    x + 1)

res6 = test.catch(() ->
  let (str: String(endsWith("A")) = "Pigeon".reverse())
    str.reverse())

res7 = test.catch(() ->
  let (x: Duration(unit == "min") = 3.min + 2.min)
    let (y: Float(!isPositive) = 1.2 + 1.3)
      x * y)

res8 = test.catch(() ->
  let (xs: List<Null|Boolean|"Pigeon"> = List("Barn Owl", true, null))
    xs)

---

(module
  (importClause
    (stringConstant
      (slStringLiteralPart)))
  (classProperty
    (identifier)
    (letExpr
      (typedIdentifier
        (identifier)
        (typeAnnotation
          (declaredType
            (qualifiedIdentifier
              (identifier)))))
      (intLiteralExpr)
      (additiveExpr
        (unqualifiedAccessExpr
          (identifier))
        (intLiteralExpr))))
  (classProperty
    (identifier)
    (letExpr
      (typedIdentifier
        (identifier)
        (typeAnnotation
          (constrainedType
            (declaredType
              (qualifiedIdentifier
                (identifier)))
            (unqualifiedAccessExpr
              (identifier)
              (argumentList
                (slStringLiteralExpr
                  (slStringLiteralPart)))))))
      (qualifiedAccessExpr
        (slStringLiteralExpr
          (slStringLiteralPart))
        (identifier)
        (argumentList))
      (qualifiedAccessExpr
        (unqualifiedAccessExpr
          (identifier))
        (identifier)
        (argumentList))))
  (classProperty
    (identifier)
    (letExpr
      (typedIdentifier
        (identifier)
        (typeAnnotation
          (constrainedType
            (declaredType
              (qualifiedIdentifier
                (identifier)))
            (equalityExpr
              (unqualifiedAccessExpr
                (identifier))
              (slStringLiteralExpr
                (slStringLiteralPart))))))
      (additiveExpr
        (qualifiedAccessExpr
          (intLiteralExpr)
          (identifier))
        (qualifiedAccessExpr
          (intLiteralExpr)
          (identifier)))
      (letExpr
        (typedIdentifier
          (identifier)
          (typeAnnotation
            (constrainedType
              (declaredType
                (qualifiedIdentifier
                  (identifier)))
              (unqualifiedAccessExpr
                (identifier)))))
        (additiveExpr
          (floatLiteralExpr)
          (floatLiteralExpr))
        (multiplicativeExpr
          (unqualifiedAccessExpr
            (identifier))
          (unqualifiedAccessExpr
            (identifier))))))
  (classProperty
    (identifier)
    (letExpr
      (typedIdentifier
        (identifier)
        (typeAnnotation
          (declaredType
            (qualifiedIdentifier
              (identifier))
            (typeArgumentList
              (unionType
                (unionType
                  (declaredType
                    (qualifiedIdentifier
                      (identifier)))
                  (declaredType
                    (qualifiedIdentifier
                      (identifier))))
                (stringLiteralType
                  (stringConstant
                    (slStringLiteralPart))))))))
      (unqualifiedAccessExpr
        (identifier)
        (argumentList
          (slStringLiteralExpr
            (slStringLiteralPart))
          (trueLiteralExpr)
          (nullLiteralExpr)))
      (unqualifiedAccessExpr
        (identifier))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList)
          (letExpr
            (typedIdentifier
              (identifier)
              (typeAnnotation
                (declaredType
                  (qualifiedIdentifier
                    (identifier)))))
            (intLiteralExpr)
            (additiveExpr
              (unqualifiedAccessExpr
                (identifier))
              (intLiteralExpr)))))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList)
          (letExpr
            (typedIdentifier
              (identifier)
              (typeAnnotation
                (constrainedType
                  (declaredType
                    (qualifiedIdentifier
                      (identifier)))
                  (unqualifiedAccessExpr
                    (identifier)
                    (argumentList
                      (slStringLiteralExpr
                        (slStringLiteralPart)))))))
            (qualifiedAccessExpr
              (slStringLiteralExpr
                (slStringLiteralPart))
              (identifier)
              (argumentList))
            (qualifiedAccessExpr
              (unqualifiedAccessExpr
                (identifier))
              (identifier)
              (argumentList)))))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList)
          (letExpr
            (typedIdentifier
              (identifier)
              (typeAnnotation
                (constrainedType
                  (declaredType
                    (qualifiedIdentifier
                      (identifier)))
                  (equalityExpr
                    (unqualifiedAccessExpr
                      (identifier))
                    (slStringLiteralExpr
                      (slStringLiteralPart))))))
            (additiveExpr
              (qualifiedAccessExpr
                (intLiteralExpr)
                (identifier))
              (qualifiedAccessExpr
                (intLiteralExpr)
                (identifier)))
            (letExpr
              (typedIdentifier
                (identifier)
                (typeAnnotation
                  (constrainedType
                    (declaredType
                      (qualifiedIdentifier
                        (identifier)))
                    (logicalNotExpr
                      (unqualifiedAccessExpr
                        (identifier))))))
              (additiveExpr
                (floatLiteralExpr)
                (floatLiteralExpr))
              (multiplicativeExpr
                (unqualifiedAccessExpr
                  (identifier))
                (unqualifiedAccessExpr
                  (identifier)))))))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList)
          (letExpr
            (typedIdentifier
              (identifier)
              (typeAnnotation
                (declaredType
                  (qualifiedIdentifier
                    (identifier))
                  (typeArgumentList
                    (unionType
                      (unionType
                        (declaredType
                          (qualifiedIdentifier
                            (identifier)))
                        (declaredType
                          (qualifiedIdentifier
                            (identifier))))
                      (stringLiteralType
                        (stringConstant
                          (slStringLiteralPart))))))))
            (unqualifiedAccessExpr
              (identifier)
              (argumentList
                (slStringLiteralExpr
                  (slStringLiteralPart))
                (trueLiteralExpr)
                (nullLiteralExpr)))
            (unqualifiedAccessExpr
              (identifier))))))))