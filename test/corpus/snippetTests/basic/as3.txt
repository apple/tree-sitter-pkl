===
basic/as3.pkl
===

amends "../snippetTest.pkl"

examples {
  ["set of listing"] {
    local s1 = Set(
      new Listing { 1; 2; 3 }
    ) as Set<Listing<Int>>
    local s2 = Set(
      new Listing { "one"; "two"; "three" }
    ) as Set<Listing<Int>>
    s1.first[0]
    module.catchOrNull(() -> s2.first) == null
    module.catch(() -> s2.first[0])
  }
  ["listing"] {
    local l = new Listing { 1; 2; 3 } as Listing<String>
    module.catchOrNull(() -> l) == null
    module.catch(() -> l[0])
  }
  ["mapping"] {
    local m1 = new Mapping {
      ["hi"] = 1
      ["bye"] = 2
    } as Mapping<String, String>
    module.catchOrNull(() -> m1) == null
    module.catch(() -> m1["hi"])
    module.catch(() -> m1["bye"])
    local m2 = new Mapping {
      ["hi"] = 1
      ["bye"] = 2
    } as Mapping<Int, Int>
    module.catch(() -> m2)
  }
}

---

(module
  (moduleHeader
      (extendsOrAmendsClause
      (stringConstant
        (slStringLiteralPart))))
  (classProperty
    (identifier)
    (objectBody
      (objectEntry
        (slStringLiteralExpr
          (slStringLiteralPart))
        (objectBody
          (objectProperty
            (modifier)
            (identifier)
            (typeTestExpr
              (unqualifiedAccessExpr
                (identifier)
                (argumentList
                  (newExpr
                    (declaredType
                      (qualifiedIdentifier
                        (identifier)))
                    (objectBody
                      (objectElement
                        (intLiteralExpr))
                      (objectElement
                        (intLiteralExpr))
                      (objectElement
                        (intLiteralExpr))))))
              (declaredType
                (qualifiedIdentifier
                  (identifier))
                (typeArgumentList
                  (declaredType
                    (qualifiedIdentifier
                      (identifier))
                    (typeArgumentList
                      (declaredType
                        (qualifiedIdentifier
                          (identifier)))))))))
          (objectProperty
            (modifier)
            (identifier)
            (typeTestExpr
              (unqualifiedAccessExpr
                (identifier)
                (argumentList
                  (newExpr
                    (declaredType
                      (qualifiedIdentifier
                        (identifier)))
                    (objectBody
                      (objectElement
                        (slStringLiteralExpr
                          (slStringLiteralPart)))
                      (objectElement
                        (slStringLiteralExpr
                          (slStringLiteralPart)))
                      (objectElement
                        (slStringLiteralExpr
                          (slStringLiteralPart)))))))
              (declaredType
                (qualifiedIdentifier
                  (identifier))
                (typeArgumentList
                  (declaredType
                    (qualifiedIdentifier
                      (identifier))
                    (typeArgumentList
                      (declaredType
                        (qualifiedIdentifier
                          (identifier)))))))))
          (objectElement
            (subscriptExpr
              (qualifiedAccessExpr
                (unqualifiedAccessExpr
                  (identifier))
                (identifier))
              (intLiteralExpr)))
          (objectElement
            (equalityExpr
              (qualifiedAccessExpr
                (moduleExpr)
                (identifier)
                (argumentList
                  (functionLiteralExpr
                    (parameterList)
                    (qualifiedAccessExpr
                      (unqualifiedAccessExpr
                        (identifier))
                      (identifier)))))
              (nullLiteralExpr)))
          (objectElement
            (qualifiedAccessExpr
              (moduleExpr)
              (identifier)
              (argumentList
                (functionLiteralExpr
                  (parameterList)
                  (subscriptExpr
                    (qualifiedAccessExpr
                      (unqualifiedAccessExpr
                        (identifier))
                      (identifier))
                    (intLiteralExpr))))))))
      (objectEntry
        (slStringLiteralExpr
          (slStringLiteralPart))
        (objectBody
          (objectProperty
            (modifier)
            (identifier)
            (typeTestExpr
              (newExpr
                (declaredType
                  (qualifiedIdentifier
                    (identifier)))
                (objectBody
                  (objectElement
                    (intLiteralExpr))
                  (objectElement
                    (intLiteralExpr))
                  (objectElement
                    (intLiteralExpr))))
              (declaredType
                (qualifiedIdentifier
                  (identifier))
                (typeArgumentList
                  (declaredType
                    (qualifiedIdentifier
                      (identifier)))))))
          (objectElement
            (equalityExpr
              (qualifiedAccessExpr
                (moduleExpr)
                (identifier)
                (argumentList
                  (functionLiteralExpr
                    (parameterList)
                    (unqualifiedAccessExpr
                      (identifier)))))
              (nullLiteralExpr)))
          (objectElement
            (qualifiedAccessExpr
              (moduleExpr)
              (identifier)
              (argumentList
                (functionLiteralExpr
                  (parameterList)
                  (subscriptExpr
                    (unqualifiedAccessExpr
                      (identifier))
                    (intLiteralExpr))))))))
      (objectEntry
        (slStringLiteralExpr
          (slStringLiteralPart))
        (objectBody
          (objectProperty
            (modifier)
            (identifier)
            (typeTestExpr
              (newExpr
                (declaredType
                  (qualifiedIdentifier
                    (identifier)))
                (objectBody
                  (objectEntry
                    (slStringLiteralExpr
                      (slStringLiteralPart))
                    (intLiteralExpr))
                  (objectEntry
                    (slStringLiteralExpr
                      (slStringLiteralPart))
                    (intLiteralExpr))))
              (declaredType
                (qualifiedIdentifier
                  (identifier))
                (typeArgumentList
                  (declaredType
                    (qualifiedIdentifier
                      (identifier)))
                  (declaredType
                    (qualifiedIdentifier
                      (identifier)))))))
          (objectElement
            (equalityExpr
              (qualifiedAccessExpr
                (moduleExpr)
                (identifier)
                (argumentList
                  (functionLiteralExpr
                    (parameterList)
                    (unqualifiedAccessExpr
                      (identifier)))))
              (nullLiteralExpr)))
          (objectElement
            (qualifiedAccessExpr
              (moduleExpr)
              (identifier)
              (argumentList
                (functionLiteralExpr
                  (parameterList)
                  (subscriptExpr
                    (unqualifiedAccessExpr
                      (identifier))
                    (slStringLiteralExpr
                      (slStringLiteralPart)))))))
          (objectElement
            (qualifiedAccessExpr
              (moduleExpr)
              (identifier)
              (argumentList
                (functionLiteralExpr
                  (parameterList)
                  (subscriptExpr
                    (unqualifiedAccessExpr
                      (identifier))
                    (slStringLiteralExpr
                      (slStringLiteralPart)))))))
          (objectProperty
            (modifier)
            (identifier)
            (typeTestExpr
              (newExpr
                (declaredType
                  (qualifiedIdentifier
                    (identifier)))
                (objectBody
                  (objectEntry
                    (slStringLiteralExpr
                      (slStringLiteralPart))
                    (intLiteralExpr))
                  (objectEntry
                    (slStringLiteralExpr
                      (slStringLiteralPart))
                    (intLiteralExpr))))
              (declaredType
                (qualifiedIdentifier
                  (identifier))
                (typeArgumentList
                  (declaredType
                    (qualifiedIdentifier
                      (identifier)))
                  (declaredType
                    (qualifiedIdentifier
                      (identifier)))))))
          (objectElement
            (qualifiedAccessExpr
              (moduleExpr)
              (identifier)
              (argumentList
                (functionLiteralExpr
                  (parameterList)
                  (unqualifiedAccessExpr
                    (identifier)))))))))))