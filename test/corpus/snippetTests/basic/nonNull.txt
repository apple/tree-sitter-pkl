===
basic/nonNull.pkl
===

amends "../snippetTest.pkl"

local class Person { name: String = "Pigeon" }

facts {
  ["returns its non-null operand"] {
    123!! == 123
    let (x = 123) x!! == 123
    1.23.ms!! == 1.23.ms
    Pair(21, 42)!! == Pair(21, 42)
    new Person {}!! == new Person {}
  }
}

examples {
  ["fails if operand is null"] {
    module.catch(() -> null!!)
    module.catch(() -> let (x = null) x!!)
  }
}

---

(module
  (moduleHeader
      (extendsOrAmendsClause
      (stringConstant
        (slStringLiteralPart))))
  (clazz
    (modifier)
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (typeAnnotation
          (declaredType
            (qualifiedIdentifier
              (identifier))))
        (slStringLiteralExpr
          (slStringLiteralPart)))))
  (classProperty
    (identifier)
    (objectBody
      (objectEntry
        (slStringLiteralExpr
          (slStringLiteralPart))
        (objectBody
          (objectElement
            (equalityExpr
              (nonNullExpr
                (intLiteralExpr))
              (intLiteralExpr)))
          (objectElement
            (letExpr
              (typedIdentifier
                (identifier))
              (intLiteralExpr)
              (equalityExpr
                (nonNullExpr
                  (unqualifiedAccessExpr
                    (identifier)))
                (intLiteralExpr))))
          (objectElement
            (equalityExpr
              (nonNullExpr
                (qualifiedAccessExpr
                  (floatLiteralExpr)
                  (identifier)))
              (qualifiedAccessExpr
                (floatLiteralExpr)
                (identifier))))
          (objectElement
            (equalityExpr
              (nonNullExpr
                (unqualifiedAccessExpr
                  (identifier)
                  (argumentList
                    (intLiteralExpr)
                    (intLiteralExpr))))
              (unqualifiedAccessExpr
                (identifier)
                (argumentList
                  (intLiteralExpr)
                  (intLiteralExpr)))))
          (objectElement
            (equalityExpr
              (nonNullExpr
                (newExpr
                  (declaredType
                    (qualifiedIdentifier
                      (identifier)))
                  (objectBody)))
              (newExpr
                (declaredType
                  (qualifiedIdentifier
                    (identifier)))
                (objectBody))))))))
  (classProperty
    (identifier)
    (objectBody
      (objectEntry
        (slStringLiteralExpr
          (slStringLiteralPart))
        (objectBody
          (objectElement
            (qualifiedAccessExpr
              (moduleExpr)
              (identifier)
              (argumentList
                (functionLiteralExpr
                  (parameterList)
                  (nonNullExpr
                    (nullLiteralExpr))))))
          (objectElement
            (qualifiedAccessExpr
              (moduleExpr)
              (identifier)
              (argumentList
                (functionLiteralExpr
                  (parameterList)
                  (letExpr
                    (typedIdentifier
                      (identifier))
                    (nullLiteralExpr)
                    (nonNullExpr
                      (unqualifiedAccessExpr
                        (identifier)))))))))))))