==========
basic/constModifier
==========

open module constModifier

import "pkl:test"

const constantSimpleValue = "constant"

local const constLocal = "const-local"

nonConstantSimpleValue = "NON-CONSTANT"

const constantNestedValue {
  nestedSimpleValue = constantSimpleValue
}

const constDyn = new Dynamic {
  [1] = "1"
  prop = "2"
}

nonConstantNestedValue {
  nestedSimpleValue = constantSimpleValue
}

function nonConstFunction() = nonConstantSimpleValue

class ConstImport {
  const cst = 10
  local const lcst = 11
  //pi1 = math.pi
  pi2 = import("pkl:math").pi
  mod = module.constantSimpleValue
  outr = outer.constantSimpleValue
  clocal = constLocal
  dynconst = constDyn[1]
  dynconst2 = constDyn.prop
  constAccess = cst
  constAccess2 = lcst
}

constImport = new ConstImport {}

class ValidConstOuter {
  name: String
  fancyName = new { title = "The \(outer.name)" }
}

validOuter = new ValidConstOuter { name = "Winner" }

class Valid {
  nested = constantNestedValue
  simple = constantSimpleValue
  dereferenced = constantNestedValue.nestedSimpleValue
}

class BrokenSimple {
  improperDefault = nonConstantSimpleValue
}

class BrokenNested {
  improperNestedDefault = nonConstantNestedValue 
}

class BrokenFunction {
  improperDefaultFromNonConstFunction = nonConstFunction()
}

res01 = new Valid {}
res02 = test.catch(() -> "\(new BrokenSimple {})")
res03 = test.catch(() -> "\(new BrokenNested {})")
res04 = test.catch(() -> "\(new BrokenFunction {})")

---

(module
  (moduleHeader
    (moduleClause
      (modifier)
      (qualifiedIdentifier
        (identifier))))
  (importClause
    (stringConstant
      (slStringLiteralPart)))
  (classProperty
    (modifier)
    (identifier)
    (slStringLiteral
      (slStringLiteralPart)))
  (classProperty
    (modifier)
    (modifier)
    (identifier)
    (slStringLiteral
      (slStringLiteralPart)))
  (classProperty
    (identifier)
    (slStringLiteral
      (slStringLiteralPart)))
  (classProperty
    (modifier)
    (identifier)
    (objectBody
      (objectProperty
        (identifier)
        (variableExpr
          (identifier)))))
  (classProperty
    (modifier)
    (identifier)
    (newExpr
      (type
        (qualifiedIdentifier
          (identifier)))
      (objectBody
        (objectEntry
          (intLiteral)
          (slStringLiteral
            (slStringLiteralPart)))
        (objectProperty
          (identifier)
          (slStringLiteral
            (slStringLiteralPart))))))
  (classProperty
    (identifier)
    (objectBody
      (objectProperty
        (identifier)
        (variableExpr
          (identifier)))))
  (classMethod
    (methodHeader
      (identifier)
      (parameterList))
    (variableExpr
      (identifier)))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (modifier)
        (identifier)
        (intLiteral))
      (classProperty
        (modifier)
        (modifier)
        (identifier)
        (intLiteral))
      (lineComment)
      (classProperty
        (identifier)
        (propertyCallExpr
          (importExpr
            (stringConstant
              (slStringLiteralPart)))
          (identifier)))
      (classProperty
        (identifier)
        (propertyCallExpr
          (moduleExpr)
          (identifier)))
      (classProperty
        (identifier)
        (propertyCallExpr
          (outerExpr)
          (identifier)))
      (classProperty
        (identifier)
        (variableExpr
          (identifier)))
      (classProperty
        (identifier)
        (subscriptExpr
          (variableExpr
            (identifier))
          (intLiteral)))
      (classProperty
        (identifier)
        (propertyCallExpr
          (variableExpr
            (identifier))
          (identifier)))
      (classProperty
        (identifier)
        (variableExpr
          (identifier)))
      (classProperty
        (identifier)
        (variableExpr
          (identifier)))))
  (classProperty
    (identifier)
    (newExpr
      (type
        (qualifiedIdentifier
          (identifier)))
      (objectBody)))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (typeAnnotation
          (type
            (qualifiedIdentifier
              (identifier)))))
      (classProperty
        (identifier)
        (newExpr
          (objectBody
            (objectProperty
              (identifier)
              (slStringLiteral
                (slStringLiteralPart)
                (interpolationExpr
                  (propertyCallExpr
                    (outerExpr)
                    (identifier))))))))))
  (classProperty
    (identifier)
    (newExpr
      (type
        (qualifiedIdentifier
          (identifier)))
      (objectBody
        (objectProperty
          (identifier)
          (slStringLiteral
            (slStringLiteralPart))))))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (variableExpr
          (identifier)))
      (classProperty
        (identifier)
        (variableExpr
          (identifier)))
      (classProperty
        (identifier)
        (propertyCallExpr
          (variableExpr
            (identifier))
          (identifier)))))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (variableExpr
          (identifier)))))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (variableExpr
          (identifier)))))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (methodCallExpr
          (identifier)
          (argumentList)))))
  (classProperty
    (identifier)
    (newExpr
      (type
        (qualifiedIdentifier
          (identifier)))
      (objectBody)))
  (classProperty
    (identifier)
    (methodCallExpr
      (variableExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteral
          (parameterList)
          (slStringLiteral
            (interpolationExpr
              (newExpr
                (type
                  (qualifiedIdentifier
                    (identifier)))
                (objectBody))))))))
  (classProperty
    (identifier)
    (methodCallExpr
      (variableExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteral
          (parameterList)
          (slStringLiteral
            (interpolationExpr
              (newExpr
                (type
                  (qualifiedIdentifier
                    (identifier)))
                (objectBody))))))))
  (classProperty
    (identifier)
    (methodCallExpr
      (variableExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteral
          (parameterList)
          (slStringLiteral
            (interpolationExpr
              (newExpr
                (type
                  (qualifiedIdentifier
                    (identifier)))
                (objectBody)))))))))
