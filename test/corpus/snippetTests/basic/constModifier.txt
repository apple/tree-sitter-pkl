===
basic/constModifier.pkl
===

open module constModifier

import "pkl:test"

const constantSimpleValue = "constant"

local const constLocal = "const-local"

nonConstantSimpleValue = "NON-CONSTANT"

const constantNestedValue {
  nestedSimpleValue = constantSimpleValue
}

const constDyn = new Dynamic {
  [1] = "1"
  prop = "2"
}

nonConstantNestedValue {
  nestedSimpleValue = constantSimpleValue
}

function nonConstFunction() = nonConstantSimpleValue

class ConstImport {
  const cst = 10
  local const lcst = 11
  pi2 = import("pkl:math").pi
  mod = module.constantSimpleValue
  outr = outer.constantSimpleValue
  clocal = constLocal
  dynconst = constDyn[1]
  dynconst2 = constDyn.prop
  constAccess = cst
  constAccess2 = lcst
}

constImport = new ConstImport {}

class ValidConstOuter {
  name: String
  fancyName = new { title = "The \(outer.name)" }
}

validOuter = new ValidConstOuter { name = "Winner" }

class Valid {
  nested = constantNestedValue
  simple = constantSimpleValue
  dereferenced = constantNestedValue.nestedSimpleValue
}

class BrokenSimple {
  improperDefault = nonConstantSimpleValue
}

class BrokenNested {
  improperNestedDefault = nonConstantNestedValue 
}

class BrokenFunction {
  improperDefaultFromNonConstFunction = nonConstFunction()
}

res01 = new Valid {}
res02 = test.catch(() -> "\(new BrokenSimple {})")
res03 = test.catch(() -> "\(new BrokenNested {})")
res04 = test.catch(() -> "\(new BrokenFunction {})")

---

(module
  (moduleHeader
    (moduleClause

      (modifier)
      (qualifiedIdentifier
        (identifier))))
  (importClause
    (stringConstant
      (slStringLiteralPart)))
  (classProperty
    (modifier)
    (identifier)
    (slStringLiteralExpr
      (slStringLiteralPart)))
  (classProperty
    (modifier)
    (modifier)
    (identifier)
    (slStringLiteralExpr
      (slStringLiteralPart)))
  (classProperty
    (identifier)
    (slStringLiteralExpr
      (slStringLiteralPart)))
  (classProperty
    (modifier)
    (identifier)
    (objectBody
      (objectProperty
        (identifier)
        (unqualifiedAccessExpr
          (identifier)))))
  (classProperty
    (modifier)
    (identifier)
    (newExpr
      (declaredType
        (qualifiedIdentifier
          (identifier)))
      (objectBody
        (objectEntry
          (intLiteralExpr)
          (slStringLiteralExpr
            (slStringLiteralPart)))
        (objectProperty
          (identifier)
          (slStringLiteralExpr
            (slStringLiteralPart))))))
  (classProperty
    (identifier)
    (objectBody
      (objectProperty
        (identifier)
        (unqualifiedAccessExpr
          (identifier)))))
  (classMethod
    (methodHeader
      (identifier)
      (parameterList))
    (unqualifiedAccessExpr
      (identifier)))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (modifier)
        (identifier)
        (intLiteralExpr))
      (classProperty
        (modifier)
        (modifier)
        (identifier)
        (intLiteralExpr))
      (classProperty
        (identifier)
        (qualifiedAccessExpr
          (importExpr
            (stringConstant
              (slStringLiteralPart)))
          (identifier)))
      (classProperty
        (identifier)
        (qualifiedAccessExpr
          (moduleExpr)
          (identifier)))
      (classProperty
        (identifier)
        (qualifiedAccessExpr
          (outerExpr)
          (identifier)))
      (classProperty
        (identifier)
        (unqualifiedAccessExpr
          (identifier)))
      (classProperty
        (identifier)
        (subscriptExpr
          (unqualifiedAccessExpr
            (identifier))
          (intLiteralExpr)))
      (classProperty
        (identifier)
        (qualifiedAccessExpr
          (unqualifiedAccessExpr
            (identifier))
          (identifier)))
      (classProperty
        (identifier)
        (unqualifiedAccessExpr
          (identifier)))
      (classProperty
        (identifier)
        (unqualifiedAccessExpr
          (identifier)))))
  (classProperty
    (identifier)
    (newExpr
      (declaredType
        (qualifiedIdentifier
          (identifier)))
      (objectBody)))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (typeAnnotation
          (declaredType
            (qualifiedIdentifier
              (identifier)))))
      (classProperty
        (identifier)
        (newExpr
          (objectBody
            (objectProperty
              (identifier)
              (slStringLiteralExpr
                (slStringLiteralPart)
                (stringInterpolation
                  (qualifiedAccessExpr
                    (outerExpr)
                    (identifier))))))))))
  (classProperty
    (identifier)
    (newExpr
      (declaredType
        (qualifiedIdentifier
          (identifier)))
      (objectBody
        (objectProperty
          (identifier)
          (slStringLiteralExpr
            (slStringLiteralPart))))))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (unqualifiedAccessExpr
          (identifier)))
      (classProperty
        (identifier)
        (unqualifiedAccessExpr
          (identifier)))
      (classProperty
        (identifier)
        (qualifiedAccessExpr
          (unqualifiedAccessExpr
            (identifier))
          (identifier)))))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (unqualifiedAccessExpr
          (identifier)))))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (unqualifiedAccessExpr
          (identifier)))))
  (clazz
    (identifier)
    (classBody
      (classProperty
        (identifier)
        (unqualifiedAccessExpr
          (identifier)
          (argumentList)))))
  (classProperty
    (identifier)
    (newExpr
      (declaredType
        (qualifiedIdentifier
          (identifier)))
      (objectBody)))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList)
          (slStringLiteralExpr
            (stringInterpolation
              (newExpr
                (declaredType
                  (qualifiedIdentifier
                    (identifier)))
                (objectBody))))))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList)
          (slStringLiteralExpr
            (stringInterpolation
              (newExpr
                (declaredType
                  (qualifiedIdentifier
                    (identifier)))
                (objectBody))))))))
  (classProperty
    (identifier)
    (qualifiedAccessExpr
      (unqualifiedAccessExpr
        (identifier))
      (identifier)
      (argumentList
        (functionLiteralExpr
          (parameterList)
          (slStringLiteralExpr
            (stringInterpolation
              (newExpr
                (declaredType
                  (qualifiedIdentifier
                    (identifier)))
                (objectBody)))))))))