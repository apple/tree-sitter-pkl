================================================================================
listings/listing4
================================================================================

amends "../snippetTest.pkl"

examples {
  ["listings are lazy"] {
    // backed by ConstantEntriesLiteralNode
    local listing = new Listing<String> {
      "foo"
      throw("uh oh")
    }
    listing[0]
    module.catch(() -> listing[1])
  }
  ["listings are lazy with generator entries"] {
    local listing = new Listing<String> {
      when (false) {
        "uh oh"
      }
      "foo"
      throw("uh oh")
    }
    listing[0]
  }
  ["nested listings are also lazy"] {
    local listing = new Listing<Listing<String>> {
      new {
        "bar"
        throw("uh oh")
      }
    }
    listing[0][0]
  }
}

--------------------------------------------------------------------------------

(module
  (moduleHeader
    (extendsOrAmendsClause
      (stringConstant
        (slStringLiteralPart))))
  (classProperty
    (identifier)
    (objectBody
      (objectEntry
        (slStringLiteral
          (slStringLiteralPart))
        (objectBody
          (lineComment)
          (objectProperty
            (modifier)
            (identifier)
            (newExpr
              (type
                (qualifiedIdentifier
                  (identifier))
                (typeArgumentList
                  (type
                    (qualifiedIdentifier
                      (identifier)))))
              (objectBody
                (objectElement
                  (slStringLiteral
                    (slStringLiteralPart)))
                (objectElement
                  (throwExpr
                    (parenthesizedExpr
                      (slStringLiteral
                        (slStringLiteralPart))))))))
          (objectElement
            (subscriptExpr
              (variableExpr
                (identifier))
              (intLiteral)))
          (objectElement
            (methodCallExpr
              (moduleExpr)
              (identifier)
              (argumentList
                (functionLiteral
                  (parameterList)
                  (subscriptExpr
                    (variableExpr
                      (identifier))
                    (intLiteral))))))))
      (objectEntry
        (slStringLiteral
          (slStringLiteralPart))
        (objectBody
          (objectProperty
            (modifier)
            (identifier)
            (newExpr
              (type
                (qualifiedIdentifier
                  (identifier))
                (typeArgumentList
                  (type
                    (qualifiedIdentifier
                      (identifier)))))
              (objectBody
                (whenGenerator
                  (falseLiteral)
                  (objectBody
                    (objectElement
                      (slStringLiteral
                        (slStringLiteralPart)))))
                (objectElement
                  (slStringLiteral
                    (slStringLiteralPart)))
                (objectElement
                  (throwExpr
                    (parenthesizedExpr
                      (slStringLiteral
                        (slStringLiteralPart))))))))
          (objectElement
            (subscriptExpr
              (variableExpr
                (identifier))
              (intLiteral)))))
      (objectEntry
        (slStringLiteral
          (slStringLiteralPart))
        (objectBody
          (objectProperty
            (modifier)
            (identifier)
            (newExpr
              (type
                (qualifiedIdentifier
                  (identifier))
                (typeArgumentList
                  (type
                    (qualifiedIdentifier
                      (identifier))
                    (typeArgumentList
                      (type
                        (qualifiedIdentifier
                          (identifier)))))))
              (objectBody
                (objectElement
                  (newExpr
                    (objectBody
                      (objectElement
                        (slStringLiteral
                          (slStringLiteralPart)))
                      (objectElement
                        (throwExpr
                          (parenthesizedExpr
                            (slStringLiteral
                              (slStringLiteralPart)))))))))))
          (objectElement
            (subscriptExpr
              (subscriptExpr
                (variableExpr
                  (identifier))
                (intLiteral))
              (intLiteral))))))))
