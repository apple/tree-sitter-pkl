================================================================================
api/yamlParser5
================================================================================

amends ".../snippetTest.pkl"

import "pkl:yaml"

local parser: yaml.Parser = new {
  maxCollectionAliases = 1
}

examples {
  ["maxCollectionAliases -- happy path"] {
    parser.parse("""
      lol1: &lol1 ["lol"]
      lol2: *lol1
      """
    )
  }
  ["maxCollectionAliases -- failing"] {
    module.catch(() -> parser.parse("""
      lol1: &lol1 ["lol"]
      lol2: *lol1
      lol3: *lol1
      """))
  }
}

--------------------------------------------------------------------------------

(module
  (moduleHeader
    (extendsOrAmendsClause
      (stringConstant
        (slStringLiteralPart))))
  (importClause
    (stringConstant
      (slStringLiteralPart)))
  (classProperty
    (modifier)
    (identifier)
    (typeAnnotation
      (type
        (qualifiedIdentifier
          (identifier)
          (identifier))))
    (newExpr
      (objectBody
        (objectProperty
          (identifier)
          (intLiteral)))))
  (classProperty
    (identifier)
    (objectBody
      (objectEntry
        (slStringLiteral
          (slStringLiteralPart))
        (objectBody
          (objectElement
            (methodCallExpr
              (variableExpr
                (identifier))
              (identifier)
              (argumentList
                (ERROR
                  (identifier)
                  (UNEXPECTED 'l'))
                (subscriptExpr
                  (variableExpr
                    (identifier))
                  (slStringLiteral
                    (slStringLiteralPart)))
                (MISSING "))))
          (objectElement
            (variableExpr
              (identifier)))
          (ERROR
            (typeAnnotation
              (type
                (type
                  (qualifiedIdentifier
                    (identifier))))))))
      (objectEntry
        (slStringLiteral
          (slStringLiteralPart))
        (objectBody
          (objectElement
            (methodCallExpr
              (moduleExpr)
              (identifier)
              (argumentList
                (functionLiteral
                  (parameterList)
                  (methodCallExpr
                    (variableExpr
                      (identifier))
                    (identifier)
                    (argumentList
                      (ERROR
                        (identifier)
                        (UNEXPECTED 'l'))
                      (binaryExpr
                        (binaryExpr
                          (subscriptExpr
                            (variableExpr
                              (identifier))
                            (slStringLiteral
                              (slStringLiteralPart)))
                          (ERROR
                            (identifier))
                          (variableExpr
                            (identifier)))
                        (ERROR
                          (identifier))
                        (variableExpr
                          (identifier)))
                      (ERROR))))))))))))
